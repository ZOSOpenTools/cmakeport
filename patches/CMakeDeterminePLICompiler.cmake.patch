diff --git a/Modules/CMakeDeterminePLICompiler.cmake b/Modules/CMakeDeterminePLICompiler.cmake
new file mode 100644
index 0000000000..622dd23ccf
--- /dev/null
+++ b/Modules/CMakeDeterminePLICompiler.cmake
@@ -0,0 +1,126 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+
+# determine the compiler to use for PLI programs
+# NOTE, a generator may set CMAKE_PLI_COMPILER before
+# loading this file to force a compiler.
+# use environment variable FC first if defined by user, next use
+# the cmake variable CMAKE_GENERATOR_PC which can be defined by a generator
+# as a default compiler
+
+include(${CMAKE_ROOT}/Modules/CMakeDetermineCompiler.cmake)
+include(Platform/${CMAKE_SYSTEM_NAME}-Determine-PLI OPTIONAL)
+include(Platform/${CMAKE_SYSTEM_NAME}-PLI OPTIONAL)
+if(NOT CMAKE_PLI_COMPILER_NAMES)
+  set(CMAKE_PLI_COMPILER_NAMES pli)
+endif()
+
+if(NOT CMAKE_PLI_COMPILER)
+  # prefer the environment variable PC
+  if(NOT $ENV{PC} STREQUAL "")
+    get_filename_component(CMAKE_PLI_COMPILER_INIT $ENV{PC} PROGRAM PROGRAM_ARGS CMAKE_PLI_FLAGS_ENV_INIT)
+    if(CMAKE_PLI_FLAGS_ENV_INIT)
+      set(CMAKE_PLI_COMPILER_ARG1 "${CMAKE_PLI_FLAGS_ENV_INIT}" CACHE STRING "Arguments to PLI compiler")
+    endif()
+    if(EXISTS ${CMAKE_PLI_COMPILER_INIT})
+    else()
+      message(FATAL_ERROR "Could not find compiler set in environment variable PC:\n$ENV{PC}.")
+    endif()
+  endif()
+
+  # next try prefer the compiler specified by the generator
+  if(CMAKE_GENERATOR_PC)
+    if(NOT CMAKE_PLI_COMPILER_INIT)
+      set(CMAKE_PLI_COMPILER_INIT ${CMAKE_GENERATOR_PC})
+    endif()
+  endif()
+
+  # finally list compilers to try
+  if(NOT CMAKE_PLI_COMPILER_INIT)
+    # Known compilers:
+    #  pli: generic compiler names
+      set(CMAKE_PLI_COMPILER_LIST
+        pli
+        )
+
+    # Vendor-specific compiler names.
+    set(_PLI_COMPILER_NAMES_ZOS       pli)
+  endif()
+
+  _cmake_find_compiler(PLI)
+
+else()
+  _cmake_find_compiler_path(PLI)
+endif()
+mark_as_advanced(CMAKE_PLI_COMPILER)
+
+# Each entry in this list is a set of extra flags to try
+# adding to the compile line to see if it helps produce
+# a valid identification executable.
+set(CMAKE_PLI_COMPILER_ID_TEST_FLAGS_FIRST
+  # Get verbose output to help distinguish compilers.
+  "-v"
+  )
+set(CMAKE_PLI_COMPILER_ID_TEST_FLAGS
+  # Try compiling to an object file only.
+  "-c"
+  )
+
+# Build a small source file to identify the compiler.
+if(NOT CMAKE_PLI_COMPILER_ID_RUN)
+  set(CMAKE_PLI_COMPILER_ID_RUN 1)
+
+
+  # Table of per-vendor compiler id flags with expected output.
+  list(APPEND CMAKE_PLI_COMPILER_ID_VENDORS IBM)
+  set(CMAKE_PLI_COMPILER_ID_VENDOR_FLAGS_IBM "-v")
+  set(CMAKE_PLI_COMPILER_ID_VENDOR_REGEX_IBM "15655-PL[.]*")
+  list(APPEND CMAKE_PLI_COMPILER_ID_MATCH_VENDORS "${CMAKE_PLI_COMPILER_ID_VENDORS}")
+  set(CMAKE_PLI_COMPILER_ID_MATCH_VENDOR_REGEX_IBM "${CMAKE_PLI_COMPILER_ID_VENDOR_REGEX_IBM}")
+  set(CMAKE_PLI_COMPILER_ID_MATCH_VERSION_REGEX_IBM "[.]*Enterprise PL/I for z/OS[ ]*([0-9\.]+)[.]*")
+# [=[ V([0-9]+)\.([0-9]+)\.([0-9]+)]=])
+  include(${CMAKE_ROOT}/Modules/CMakeDetermineCompilerId.cmake)
+  CMAKE_DETERMINE_COMPILER_ID(PLI PLIFLAGS CMakePLICompilerId.pli)
+
+  unset(_version_info)
+
+endif ()
+
+set(_CMAKE_PROCESSING_LANGUAGE "PLI")
+include(CMakeFindBinUtils)
+include(Compiler/${CMAKE_PLI_COMPILER_ID}-FindBinUtils OPTIONAL)
+unset(_CMAKE_PROCESSING_LANGUAGE)
+
+if(CMAKE_PLI_COMPILER_SYSROOT)
+  string(CONCAT _SET_CMAKE_PLI_COMPILER_SYSROOT
+    "set(CMAKE_PLI_COMPILER_SYSROOT \"${CMAKE_PLI_COMPILER_SYSROOT}\")\n"
+    "set(CMAKE_COMPILER_SYSROOT \"${CMAKE_PLI_COMPILER_SYSROOT}\")")
+else()
+  set(_SET_CMAKE_PLI_COMPILER_SYSROOT "")
+endif()
+
+if(CMAKE_PLI_COMPILER_ARCHITECTURE_ID)
+  set(_SET_CMAKE_PLI_COMPILER_ARCHITECTURE_ID
+    "set(CMAKE_PLI_COMPILER_ARCHITECTURE_ID ${CMAKE_PLI_COMPILER_ARCHITECTURE_ID})")
+else()
+  set(_SET_CMAKE_PLI_COMPILER_ARCHITECTURE_ID "")
+endif()
+
+if(CMAKE_PLI_COMPILER_ID)
+  set(_SET_CMAKE_PLI_COMPILER_ID
+    "set(CMAKE_PLI_COMPILER_ID ${CMAKE_PLI_COMPILER_ID})")
+else()
+  set(_SET_CMAKE_PLI_COMPILER_ID "")
+endif()
+
+if(MSVC_PLI_ARCHITECTURE_ID)
+  set(SET_MSVC_PLI_ARCHITECTURE_ID
+    "set(MSVC_PLI_ARCHITECTURE_ID ${MSVC_PLI_ARCHITECTURE_ID})")
+endif()
+# configure variables set in this file for fast reload later on
+configure_file(${CMAKE_ROOT}/Modules/CMakePLICompiler.cmake.in
+  ${CMAKE_PLATFORM_INFO_DIR}/CMakePLICompiler.cmake
+  @ONLY
+  )
+set(CMAKE_PLI_COMPILER_ENV_VAR "PC")
