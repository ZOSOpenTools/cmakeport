diff --git a/Source/cmInstallCommand.cxx b/Source/cmInstallCommand.cxx
index 7f5f15b3c9..b409fa62e5 100644
--- a/Source/cmInstallCommand.cxx
+++ b/Source/cmInstallCommand.cxx
@@ -134,6 +134,7 @@ public:
     const cmInstallCommandArguments* args) const;
   std::string GetManDestination(const cmInstallCommandArguments* args) const;
   std::string GetDocDestination(const cmInstallCommandArguments* args) const;
+  std::string GetImportLibrarySuffix(const cmInstallCommandArguments* args) const;
   std::string GetDestinationForType(const cmInstallCommandArguments* args,
                                     const std::string& type) const;
 
@@ -690,6 +691,9 @@ bool HandleTargetsMode(std::vector<std::string> const& args,
     return true;
   }
 
+  // Check whether this is a z/OS platform.
+  bool zos_platform = helper.GetImportLibrarySuffix(nullptr) == ".x";
+
   for (std::string const& tgt : targetList) {
 
     if (helper.Makefile->IsAlias(tgt)) {
@@ -834,19 +838,28 @@ bool HandleTargetsMode(std::vector<std::string> const& args,
               target, archiveArgs, true, helper.Makefile->GetBacktrace());
             artifactsSpecified = true;
           }
-          if (!runtimeArgs.GetDestination().empty()) {
+          if (!runtimeArgs.GetDestination().empty() && !zos_platform) {
             // The DLL uses the RUNTIME properties.
             runtimeGenerator = CreateInstallTargetGenerator(
               target, runtimeArgs, false, helper.Makefile->GetBacktrace());
             artifactsSpecified = true;
           }
-          if (!archiveGenerator && !runtimeGenerator) {
+          if (!libraryArgs.GetDestination().empty() && zos_platform) {
+            // The DLL uses the LIBRARY properties.
+            libraryGenerator = CreateInstallTargetGenerator(
+              target, libraryArgs, true, helper.Makefile->GetBacktrace());
+            artifactsSpecified = true;
+          }
+          if (!archiveGenerator && !runtimeGenerator && !libraryGenerator) {
             archiveGenerator = CreateInstallTargetGenerator(
               target, archiveArgs, true, helper.Makefile->GetBacktrace(),
               helper.GetArchiveDestination(nullptr));
             runtimeGenerator = CreateInstallTargetGenerator(
               target, runtimeArgs, false, helper.Makefile->GetBacktrace(),
               helper.GetRuntimeDestination(nullptr));
+            libraryGenerator = CreateInstallTargetGenerator(
+              target, libraryArgs, true, helper.Makefile->GetBacktrace(),
+              helper.GetLibraryDestination(nullptr));
           }
           if (runtimeDependencySet && runtimeGenerator) {
             runtimeDependencySet->AddLibrary(runtimeGenerator.get());
@@ -2461,6 +2474,12 @@ std::string Helper::GetDocDestination(
                               this->GetDataRootDestination(nullptr) + "/doc");
 }
 
+std::string Helper::GetImportLibrarySuffix(const cmInstallCommandArguments* args) const
+{
+  return this->Makefile->GetSafeDefinition("CMAKE_IMPORT_LIBRARY_SUFFIX");
+}
+
+
 std::string Helper::GetDestinationForType(
   const cmInstallCommandArguments* args, const std::string& type) const
 {
