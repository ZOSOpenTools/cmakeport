diff --git a/Modules/CMakePLIInformation.cmake b/Modules/CMakePLIInformation.cmake
new file mode 100644
index 0000000000..de01b148b6
--- /dev/null
+++ b/Modules/CMakePLIInformation.cmake
@@ -0,0 +1,168 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+
+include(CMakeLanguageInformation)
+
+# This file sets the basic flags for the PLI language in CMake.
+# It also loads the available platform file for the system-compiler
+# if it exists.
+
+set(_INCLUDED_FILE 0)
+
+set(CMAKE_PLI_OUTPUT_EXTENSION .o)
+set(CMAKE_INCLUDE_FLAG_PLI "-I")
+
+# Load compiler-specific information.
+if(CMAKE_PLI_COMPILER_ID)
+  include(Compiler/${CMAKE_PLI_COMPILER_ID}-PLI OPTIONAL)
+endif()
+
+set(CMAKE_BASE_NAME)
+get_filename_component(CMAKE_BASE_NAME "${CMAKE_PLI_COMPILER}" NAME_WE)
+if(CMAKE_PLI_COMPILER_ID)
+  include(Platform/${CMAKE_EFFECTIVE_SYSTEM_NAME}-${CMAKE_PLI_COMPILER_ID}-PLI OPTIONAL RESULT_VARIABLE _INCLUDED_FILE)
+endif()
+if (NOT _INCLUDED_FILE)
+  include(Platform/${CMAKE_EFFECTIVE_SYSTEM_NAME}-${CMAKE_BASE_NAME} OPTIONAL
+          RESULT_VARIABLE _INCLUDED_FILE)
+endif ()
+
+# load any compiler-wrapper specific information
+if (CMAKE_PLI_COMPILER_WRAPPER)
+  __cmake_include_compiler_wrapper(PLI)
+endif ()
+
+# We specify the compiler information in the system file for some
+# platforms, but this language may not have been enabled when the file
+# was first included.  Include it again to get the language info.
+# Remove this when all compiler info is removed from system files.
+if (NOT _INCLUDED_FILE)
+  include(Platform/${CMAKE_SYSTEM_NAME} OPTIONAL)
+endif ()
+
+if(CMAKE_PLI_SIZEOF_DATA_PTR)
+  foreach(f ${CMAKE_PLI_ABI_FILES})
+    include(${f})
+  endforeach()
+  unset(CMAKE_PLI_ABI_FILES)
+endif()
+
+# This should be included before the _INIT variables are
+# used to initialize the cache.  Since the rule variables
+# have if blocks on them, users can still define them here.
+# But, it should still be after the platform file so changes can
+# be made to those values.
+
+if(CMAKE_USER_MAKE_RULES_OVERRIDE)
+  # Save the full path of the file so try_compile can use it.
+  include(${CMAKE_USER_MAKE_RULES_OVERRIDE} RESULT_VARIABLE _override)
+  set(CMAKE_USER_MAKE_RULES_OVERRIDE "${_override}")
+endif()
+
+if(CMAKE_USER_MAKE_RULES_OVERRIDE_PLI)
+  # Save the full path of the file so try_compile can use it.
+  include(${CMAKE_USER_MAKE_RULES_OVERRIDE_PLI} RESULT_VARIABLE _override)
+  set(CMAKE_USER_MAKE_RULES_OVERRIDE_PLI "${_override}")
+endif()
+
+if(NOT CMAKE_PLI_COMPILE_OPTIONS_PIC)
+  set(CMAKE_PLI_COMPILE_OPTIONS_PIC ${CMAKE_C_COMPILE_OPTIONS_PIC})
+endif()
+
+if(NOT CMAKE_PLI_COMPILE_OPTIONS_PIE)
+  set(CMAKE_PLI_COMPILE_OPTIONS_PIE ${CMAKE_C_COMPILE_OPTIONS_PIE})
+endif()
+if(NOT CMAKE_PLI_LINK_OPTIONS_PIE)
+  set(CMAKE_PLI_LINK_OPTIONS_PIE ${CMAKE_C_LINK_OPTIONS_PIE})
+endif()
+if(NOT CMAKE_PLI_LINK_OPTIONS_NO_PIE)
+  set(CMAKE_PLI_LINK_OPTIONS_NO_PIE ${CMAKE_C_LINK_OPTIONS_NO_PIE})
+endif()
+
+if(NOT CMAKE_PLI_COMPILE_OPTIONS_DLL)
+  set(CMAKE_PLI_COMPILE_OPTIONS_DLL ${CMAKE_C_COMPILE_OPTIONS_DLL})
+endif()
+
+set(CMAKE_VERBOSE_MAKEFILE FALSE CACHE BOOL "If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.")
+
+set(CMAKE_PLI_FLAGS_INIT "$ENV{FFLAGS} ${CMAKE_PLI_FLAGS_INIT}")
+
+cmake_initialize_per_config_variable(CMAKE_PLI_FLAGS "Flags used by the PLI compiler")
+
+if(NOT CMAKE_PLI_COMPILER_LAUNCHER AND DEFINED ENV{CMAKE_PLI_COMPILER_LAUNCHER})
+  set(CMAKE_PLI_COMPILER_LAUNCHER "$ENV{CMAKE_PLI_COMPILER_LAUNCHER}"
+    CACHE STRING "Compiler launcher for PLI.")
+endif()
+
+include(CMakeCommonLanguageInclude)
+
+# now define the following rule variables
+
+# CMAKE_PLI_CREATE_SHARED_LIBRARY
+# CMAKE_PLI_CREATE_SHARED_MODULE
+# CMAKE_PLI_COMPILE_OBJECT
+# CMAKE_PLI_LINK_EXECUTABLE
+
+# variables supplied by the generator at use time
+# <TARGET>
+# <TARGET_BASE> the target without the suffix
+# <OBJECTS>
+# <OBJECT>
+# <LINK_LIBRARIES>
+# <FLAGS>
+# <LINK_FLAGS>
+
+# PLI compiler information
+# <CMAKE_PLI_COMPILER>
+# <CMAKE_SHARED_LIBRARY_CREATE_PLI_FLAGS>
+# <CMAKE_SHARED_MODULE_CREATE_PLI_FLAGS>
+# <CMAKE_PLI_LINK_FLAGS>
+
+# Static library tools
+# <CMAKE_AR>
+# <CMAKE_RANLIB>
+
+# create a PLI shared library
+if(NOT CMAKE_PLI_CREATE_SHARED_LIBRARY)
+  set(CMAKE_PLI_CREATE_SHARED_LIBRARY
+      "<CMAKE_PLI_COMPILER> <CMAKE_SHARED_LIBRARY_PLI_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_PLI_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
+endif()
+
+# create a PLI shared module just copy the shared library rule
+if(NOT CMAKE_PLI_CREATE_SHARED_MODULE)
+  set(CMAKE_PLI_CREATE_SHARED_MODULE ${CMAKE_PLI_CREATE_SHARED_LIBRARY})
+endif()
+
+# Create a static archive incrementally for large object file counts.
+# If CMAKE_PLI_CREATE_STATIC_LIBRARY is set it will override these.
+if(NOT DEFINED CMAKE_PLI_ARCHIVE_CREATE)
+  set(CMAKE_PLI_ARCHIVE_CREATE "<CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>")
+endif()
+if(NOT DEFINED CMAKE_PLI_ARCHIVE_APPEND)
+  set(CMAKE_PLI_ARCHIVE_APPEND "<CMAKE_AR> q <TARGET> <LINK_FLAGS> <OBJECTS>")
+endif()
+if(NOT DEFINED CMAKE_PLI_ARCHIVE_FINISH)
+  set(CMAKE_PLI_ARCHIVE_FINISH "<CMAKE_RANLIB> <TARGET>")
+endif()
+
+# compile a PLI file into an object file
+if(NOT CMAKE_PLI_COMPILE_OBJECT)
+  set(CMAKE_PLI_COMPILE_OBJECT
+    "<CMAKE_PLI_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT> -c <SOURCE>")
+endif()
+
+# link a PLI program
+if(NOT CMAKE_PLI_LINK_EXECUTABLE)
+  set(CMAKE_PLI_LINK_EXECUTABLE
+    "<CMAKE_PLI_COMPILER> <CMAKE_PLI_LINK_FLAGS> <LINK_FLAGS> <FLAGS> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
+endif()
+
+if(CMAKE_PLI_STANDARD_LIBRARIES_INIT)
+  set(CMAKE_PLI_STANDARD_LIBRARIES "${CMAKE_PLI_STANDARD_LIBRARIES_INIT}"
+    CACHE STRING "Libraries linked by default with all PLI applications.")
+  mark_as_advanced(CMAKE_PLI_STANDARD_LIBRARIES)
+endif()
+
+# set this variable so we can avoid loading this more than once.
+set(CMAKE_PLI_INFORMATION_LOADED 1)
